<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

<style>
    /* Colors */
:root {
    --greenSeaweed: rgba(2, 128, 144, 1);
    --blueQueen: rgba(69, 105, 144, 1);
    --redFire: rgba(244, 91, 105, 1);
  }
  
  /* Fonts */
  :root {
    --fontAsap: 'Asap', sans-serif;
  }
  
  body {
    background-color: var(--redFire);
    font-family: var(--fontAsap);
  }
  
  .login {
    overflow: hidden;
    background-color: white;
    padding: 40px 30px 30px 30px;
    border-radius: 10px;
    position: absolute;
    top: 50%;
    left: 50%;
    width: 400px;
    transform: translate(-50%, -50%);
    transition: transform 300ms, box-shadow 300ms;
    box-shadow: 5px 10px 10px rgba(2, 128, 144, 0.2);
  }
  
  .login::before,
  .login::after {
    content: '';
    position: absolute;
    width: 600px;
    height: 600px;
    border-top-left-radius: 40%;
    border-top-right-radius: 45%;
    border-bottom-left-radius: 35%;
    border-bottom-right-radius: 40%;
    z-index: -1;
  }
  
  .login::before {
    left: 40%;
    bottom: -130%;
    background-color: rgba(69, 105, 144, 0.15);
    animation: wawes 6s infinite linear;
  }
  
  .login::after {
    left: 35%;
    bottom: -125%;
    background-color: rgba(2, 128, 144, 0.2);
    animation: wawes 7s infinite;
  }
  
  .login > input {
    font-family: var(--fontAsap);
    display: block;
    border-radius: 5px;
    font-size: 16px;
    background: white;
    width: 100%;
    border: 0;
    padding: 10px 10px;
    margin: 15px -10px;
  }
  
  .login > button {
    font-family: var(--fontAsap);
    cursor: pointer;
    color: #fff;
    font-size: 16px;
    text-transform: uppercase;
    width: 80px;
    border: 0;
    padding: 10px 0;
    margin-top: 10px;
    margin-left: -5px;
    border-radius: 5px;
    background-color: var(--redFire);
    transition: background-color 300ms;
  }
  
  .login > button:hover {
    background-color: #d85c65; /* Adjusted manually since we can't use the darken() function in pure CSS */
  }
  
  @keyframes wawes {
    from {
      transform: rotate(0);
    }
    to {
      transform: rotate(360deg);
    }
  }
  
  a {
    text-decoration: none;
    color: rgba(255, 255, 255, 0.6);
    position: absolute;
    right: 10px;
    bottom: 10px;
    font-size: 12px;
  }
  
</style>
</head>
<body>
    <form  method="post" id="loginForm" class="login">
        <input type="email" id="email" placeholder="Email" name="email" >
        <span id="emailError" class="error-message"></span>
      
        <input type="password" id="password" placeholder="Password" name="password"  minlength="6">
        <span id="passwordError" class="error-message"></span>
      
        <button type="submit">Login</button>
      </form>
      
      <style>
        .error-message {
          color: red;
          font-size: 12px;
          margin-top: 5px;
          display: none; /* Initially hidden */
        }
      </style>
      


    <!-- <form class="login" id="loginForm" class="login">
        <input type="email" placeholder="Email" name="email" required>
        <input type="password" placeholder="Password" name="password" required minlength="6">
        <button>Login</button>
      </form> -->
      
      <!-- <a href="https://codepen.io/davinci/" target="_blank">check my other pens</a> -->
</body>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
<script>


  document.getElementById('loginForm').addEventListener('submit', async function (event) {
    event.preventDefault();
    
    document.getElementById('emailError').innerText = '';
    document.getElementById('passwordError').innerText = '';

    const email = document.getElementById('email').value.trim();
    const password = document.getElementById('password').value.trim();

    let isValid = true;

  
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    // Validate email
    if (!emailPattern.test(email)) {
      document.getElementById('emailError').innerText = 'Please enter a valid email address.';
      document.getElementById('emailError').style.display = 'block';
      isValid = false;
    } else {
      document.getElementById('emailError').style.display = 'none';
    }

    // Validate password
    if (password.length < 6) {
      document.getElementById('passwordError').innerText = 'Password must be at least 6 characters long.';
      document.getElementById('passwordError').style.display = 'block';
      isValid = false;
    } else {
      document.getElementById('passwordError').style.display = 'none';
    }

    
    if (!isValid) {
      return;
    }

    
    const formData = {
      email,
      password
    };

    try {
    
      const response = await fetch('/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      const result = await response.json();

      if (result.success) {
        
        window.location.href = '/home';
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Login Failed',
          text: result.message || 'Email or password is incorrect. Please try again.',
          confirmButtonText: 'OK'
        });
      }
    } catch (error) {
      console.error('Error:', error.message);
      Swal.fire({
        icon: 'error',
        title: 'An Error Occurred',
        text: 'Please try again.',
        confirmButtonText: 'OK'
      });
    }
  });


</script>
</html>