<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Panel</title>
  <!-- SweetAlert2 CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <!-- Bootstrap CSS for styling -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
    }

    /* Top panel styles */
    .top-panel {
      background-color: #f8f9fa;
      padding: 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #dee2e6;
    }

    .top-panel h1 {
      margin: 0;
      font-size: 24px;
    }

    .signout-btn {
      background-color: red;
      color: white;
      border: none;
      padding: 10px 20px;
      cursor: pointer;
    }

    /* Container styles */
    .container {
      padding: 40px;
      max-width: 900px;
      margin: 0 auto;
    }

    /* Add student button styles */
    .add-student-btn {
      background-color: green;
      color: white;
      border: none;
      padding: 10px 20px;
      margin-bottom: 20px;
      cursor: pointer;
    }

    /* Table styles */
    .student-table {
      width: 100%;
      border-collapse: collapse;
    }

    .student-table th, .student-table td {
      border: 1px solid #dee2e6;
      padding: 10px;
      text-align: left;
    }

    .student-table th {
      background-color: #f8f9fa;
    }

  </style>
</head>
<body>
  <!-- Top Panel -->
  <div class="top-panel">
    <h1>Admin Panel</h1>
    <a  href="/" class="signout-btn btn btn-danger" >Sign Out</a>
  </div>

  <!-- Main Container -->
  <div class="container">
    <!-- Add Student Button -->
    <button class="add-student-btn" data-bs-toggle="modal" data-bs-target="#addStudentModal">Add Student</button>

    <!-- Student Details Table -->
    <h3 class="text-center ">Student Details</h3>
    <table class="student-table">
      
      <thead>

        <tr>
          <th>Full Name</th>
          <th>Age</th>
          <th>Class</th>
          <th>Gender</th>
          <th>Edit</th>
          <th>Delete</th>
        </tr>
      </thead>
      <tbody>
        <% if (stuData.length>0) { %>
          <% for( let i = 0; i < stuData.length; i++ ) { %>
            <tr>
              <td><%=stuData[i].name%></td>
              <td><%=stuData[i].class%></td>
              <td><%=stuData[i].age%></td>
              <td><%=stuData[i].gender%></td>
              <td><button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#editStudentModal" onclick="editStudent('<%=stuData[i].name%>','<%=stuData[i].age%>','<%=stuData[i].gender%>','<%=stuData[i].class%>','<%=stuData[i]._id%>')">Edit</button></td>
              <td><button class="btn btn-danger btn-sm" onclick="deleteStudent('<%=stuData[i]._id%>')">Delete</button></td>
            </tr>
          <% } %>
         
          <% }else{%>
            <p class="text-danger text-center"> NO DATA</p>
            <%} %>
       
       
        <!-- More rows can be added here -->
      </tbody>
    </table>
  </div>

  <!-- Add Student Modal -->
  <div class="modal fade" id="addStudentModal" tabindex="-1" aria-labelledby="addStudentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addStudentModalLabel">Add New Student</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="addStudent" method="post">
            <div class="mb-3">
              <label for="studentName" class="form-label">Name</label>
              <input name="name" type="text" class="form-control" id="studentName" placeholder="Enter name">
            </div>
            <div class="mb-3">
              <label for="studentAge" class="form-label">Age</label>
              <input name="age" type="number" class="form-control" id="studentAge" placeholder="Enter age">
            </div>
            <div class="mb-3">
              <label for="studentClass" class="form-label">Class</label>
              <input name="class" type="text" class="form-control" id="studentClass" placeholder="Enter class">
            </div>
            <div class="mb-3">
              <label for="studentSex" class="form-label">Gender</label>
              <input name="gender" type="text" class="form-control" id="studentSex" placeholder="Enter Gender">
            </div>
            <input name="editstudentId" type="hidden" id="editStudentId">
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" onclick="saveStudent()">Save</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Edit Student Modal -->
  <div class="modal fade" id="editStudentModal" tabindex="-1" aria-labelledby="editStudentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editStudentModalLabel">Edit Student</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editStudent" method="post" >
            <div class="mb-3">
              <label for="editStudentName" class="form-label">Name</label>
              <input name="name" type="text" class="form-control" id="editStudentName" placeholder="Enter name">
            </div>
            <div class="mb-3">
              <label for="editStudentAge" class="form-label">Age</label>
              <input name="age" type="number" class="form-control" id="editStudentAge" placeholder="Enter age">
            </div>
            <div class="mb-3">
              <label for="editStudentClass" class="form-label">Class</label>
              <input name="class" type="text" class="form-control" id="editStudentClass" placeholder="Enter class">
            </div>
            <div class="mb-3">
              <label for="editStudentSex" class="form-label">Gender</label>
              <input name="gender" type="text" class="form-control" id="editStudentSex" placeholder="Enter Gender">
            </div>
            <input name="editstudentId" type="hidden" id="editStudentId">
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" onclick="updateStudent()">Save</button>
        </div>
      </div>
    </div>
  </div>

  <!-- SweetAlert2 JavaScript -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
  <!-- Bootstrap JavaScript for functionality -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  
  <script>
    // Function to handle sign-out button click
    function signOut() {
      Swal.fire({
        title: 'Are you sure?',
        text: 'You will be signed out of the admin panel.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Sign Out'
      }).then((result) => {
        if (result.isConfirmed) {
          // Perform sign-out operation (redirect or API call)
          Swal.fire(
            'Signed Out!',
            'You have been signed out successfully.',
            'success'
          );
        }
      });
    }

    // Function to save a new student
   async function saveStudent(){
      // Collect the values from the input fields
      const name = document.getElementById('studentName').value;
      const age = document.getElementById('studentAge').value;
      const studentClass = document.getElementById('studentClass').value;
      const gender = document.getElementById('studentSex').value;

      const formData={
        name,
        age,
        studentClass,
        gender
      }
      
      // You can add your logic here to save the new student (e.g., sending data to the server)
      try {
        const response = await fetch("/addStudent",{
          method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });
        const data = await response.json()
       
        if(data.success){
          Swal.fire({
              icon: 'success',
              title: data.message,
              showConfirmButton: false,
              timer: 1000,
              toast: true,
              position: 'top-end'
          })
          
            const addStudentModal = new bootstrap.Modal(document.getElementById('addStudentModal'));
            addStudentModal.hide();
            // $('#addStudentModal').modal('hide');
            window.location.reload()
          
        }else{
          Swal.fire({
              icon: 'error',
              title: data.message,
              showConfirmButton: false,
              timer: 1000,
              toast: true,
              position: 'top-end'
            })
        }
      }catch (error) {
        console.log(error)
      }
      // Close the modal after saving
     

      // Show a success message using SweetAlert2
      // Swal.fire(
      //   'Added!',
      //   'New student has been added.',
      //   'success'
      // );
    }




    async function editStudent(name,age,gender,studClass,id){
    
      document.getElementById('editStudentName').value=name;
       document.getElementById('editStudentAge').value=age;
      document.getElementById('editStudentClass').value=studClass;
      document.getElementById('editStudentSex').value=gender;
      document.getElementById('editStudentId').value=id;
    }

    // Function to update student details
    async function updateStudent() {
      // Collect the values from the input fields
      const name = document.getElementById('editStudentName').value;
      const age = document.getElementById('editStudentAge').value;
      const studentClass = document.getElementById('editStudentClass').value;
      const gender = document.getElementById('editStudentSex').value;
      const studId = document.getElementById('editStudentId').value;

      // You can add your logic here to update the student details (e.g., sending data to the server)
      const formData = {
        name,
        age,
        studentClass,
        gender,
        studId
      }
      const response = await fetch("/editStudent",{
        method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
      })
      const data =await response.json()
      if(data.success){
        Swal.fire({
              icon: 'success',
              title: data.message,
              showConfirmButton: false,
              timer: 2000,
              toast: true,
              position: 'top-end'
          })
            
           // Close the modal after saving
      const editStudentModal = new bootstrap.Modal(document.getElementById('editStudentModal'));
      editStudentModal.hide();
      window.location.reload()
      }else{
          Swal.fire({
              icon: 'error',
              title: data.message,
              showConfirmButton: false,
              timer: 2000,
              toast: true,
              position: 'top-end'
            })
        }
    }

    
    const deleteStudent = async (studentId) => {
      console.log(studentId,'skdf')
        try {
          const result = await Swal.fire({
            title: 'Confirmation',
            text: `Are you sure you want to delete this student?`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            toast: true,
            confirmButtonText: `Yes,delete it!`
          });

          if (result.isConfirmed) {
            const response = await fetch(`/deleteStudent`, {
              method: 'DELETE',
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({studentId})
            });

              const data = await response.json();
            
              if (data.success) {
                Swal.fire({
                  icon: 'success',
                  title: 'Success',
                  text: data.message,
                  toast: true,
                  timer: 2000,
                  position: 'top-end',
                  showConfirmButton: false,
                }).then(() => {
                  window.location.reload(); 
                });
              } else {
                Swal.fire({
                  icon: 'info',
                  title: data.message,
                  toast: true,
                  timer: 2000,
                  position: 'top-end',
                  showConfirmButton: false,
                }).then(() => {
                  window.location.reload(); 
                });;
              }
           
          }
        } catch (error) {
          console.error('Error:', error);
          Swal.fire({
            icon: 'error',
            title: data.message,

            toast: true,
            timer: 2000,
            position: 'top-end',
            showConfirmButton: false,
          });
        }
      }
  </script>
</body>
</html>
